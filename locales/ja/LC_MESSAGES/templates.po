# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, oTree team
# This file is distributed under the same license as the oTree package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: oTree \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-31 23:32+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/templates.rst:4
msgid "Templates"
msgstr ""

#: ../../source/templates.rst:7
msgid "Template syntax"
msgstr ""

#: ../../source/templates.rst:10
msgid "Variables"
msgstr ""

#: ../../source/templates.rst:12
msgid "You can display a variable like this:"
msgstr ""

#: ../../source/templates.rst:18
msgid "The following variables are available in templates:"
msgstr ""

#: ../../source/templates.rst:20
msgid "``player``: the player currently viewing the page"
msgstr ""

#: ../../source/templates.rst:21
msgid "``group``: the group the current player belongs to"
msgstr ""

#: ../../source/templates.rst:22
msgid "``subsession``: the subsession the current player belongs to"
msgstr ""

#: ../../source/templates.rst:23
msgid "``participant``: the participant the current player belongs to"
msgstr ""

#: ../../source/templates.rst:24
msgid "``session``: the current session"
msgstr ""

#: ../../source/templates.rst:25
msgid "``Constants``"
msgstr ""

#: ../../source/templates.rst:26
msgid "Any variables you passed with :ref:`vars_for_template`."
msgstr ""

#: ../../source/templates.rst:29
msgid "Conditions (\"if\")"
msgstr ""

#: ../../source/templates.rst:35
msgid "With an 'else':"
msgstr ""

#: ../../source/templates.rst:46
msgid "Loops (\"for\")"
msgstr ""

#: ../../source/templates.rst:56
msgid "Method calls"
msgstr ""

#: ../../source/templates.rst:58
msgid ""
"To call a method from one of your models, omit the parentheses (unlike "
"regular Python code)."
msgstr ""

#: ../../source/templates.rst:72
msgid "Accessing items in a dict"
msgstr ""

#: ../../source/templates.rst:74
msgid ""
"Whereas in Python code you do ``my_dict['foo']``, in a template you would"
" do ``{{ my_dict.foo }}``."
msgstr ""

#: ../../source/templates.rst:78
msgid "Comments"
msgstr ""

#: ../../source/templates.rst:90
msgid "Template filters"
msgstr ""

#: ../../source/templates.rst:92
msgid ""
"In addition to the filters available with Django's template language, "
"oTree has the ``|c`` filter, which is equivalent to the ``c()`` function."
" For example, ``{{ 20|c }}`` displays as ``20 points``."
msgstr ""

#: ../../source/templates.rst:97
msgid "Things you can't do"
msgstr ""

#: ../../source/templates.rst:99
msgid ""
"The template language is just for displaying values. You can't do math "
"(``+``, ``*``, ``/``, ``-``) or otherwise modify numbers, lists, strings,"
" etc. For that, you should use :ref:`vars_for_template`."
msgstr ""

#: ../../source/templates.rst:105
msgid "How templates work: an example"
msgstr ""

#: ../../source/templates.rst:107
msgid "oTree templates are a mix of 2 languages:"
msgstr ""

#: ../../source/templates.rst:109
msgid "*HTML* (which uses angle brackets like ``<this>`` and ``</this>``."
msgstr ""

#: ../../source/templates.rst:110
msgid ""
"*Django template tags* (which use curly braces like ``{% this %}`` and "
"``{{ this }}``"
msgstr ""

#: ../../source/templates.rst:113
msgid "In this example, let's say your template looks like this:"
msgstr ""

#: ../../source/templates.rst:129
msgid "Step 1: oTree scans Django tags, produces HTML (a.k.a. \"server side\")"
msgstr ""

#: ../../source/templates.rst:131
msgid ""
"oTree uses the current values of the variables to convert the above "
"Django code to plain HTML, like this:"
msgstr ""

#: ../../source/templates.rst:147
msgid ""
"Step 2: Browser scans HTML tags, produces a webpage (a.k.a. \"client "
"side\")"
msgstr ""

#: ../../source/templates.rst:149
msgid ""
"The oTree server then sends this HTML to the user's computer, where their"
" web browser can read the code and display it as a formatted web page:"
msgstr ""

#: ../../source/templates.rst:155
msgid "Note that the browser never sees the Django tags."
msgstr ""

#: ../../source/templates.rst:158
msgid "The key point"
msgstr ""

#: ../../source/templates.rst:160
msgid ""
"If one of your pages doesn't look the way you want, you can isolate which"
" of the above steps went wrong. In your browser, right-click and \"view "
"source\". (Note: \"view source\" may not work in split-screen mode.)"
msgstr ""

#: ../../source/templates.rst:165
msgid ""
"You can then see the pure HTML that was generated (along with any "
"JavaScript or CSS)."
msgstr ""

#: ../../source/templates.rst:168
msgid ""
"If the HTML code doesn't look the way you expect, then something went "
"wrong on the server side. Look for mistakes in your ``vars_for_template``"
" or your Django template tags."
msgstr ""

#: ../../source/templates.rst:171
msgid ""
"If there was no error in generating the HTML code, then it is probably an"
" issue with how you are using HTML (or JavaScript) syntax. Try pasting "
"the problematic part of the HTML back into a template, without the Django"
" tags, and edit it until it produces the right output. Then put the "
"Django tags back in, to make it dynamic again."
msgstr ""

#: ../../source/templates.rst:180
msgid "Images (static files)"
msgstr ""

#: ../../source/templates.rst:182
msgid ""
"The simplest way to include images, video, 3rd party JS/CSS libraries, "
"and other static files in your project is to host them online, for "
"example on Dropbox, Imgur, YouTube, etc."
msgstr ""

#: ../../source/templates.rst:185
msgid ""
"Then, put its URL in an <img> or <video> tag in your template, for "
"example:"
msgstr ""

#: ../../source/templates.rst:191
msgid ""
"You can also store images directly in your project. (but note that large "
"file sizes can affect performance). oTree Studio has an image upload "
"tool. (If you are using a text editor, see :ref:`here <staticfiles>`.) "
"Once you have stored the image, you can display it like this:"
msgstr ""

#: ../../source/templates.rst:203
msgid "Dynamic images"
msgstr ""

#: ../../source/templates.rst:205
msgid ""
"If you need to show different images depending on the context (like "
"showing a different image each round), you can construct it in "
"``vars_for_template`` and pass it to the template, e.g.:"
msgstr ""

#: ../../source/templates.rst:218
msgid "Then in the template:"
msgstr ""

#: ../../source/templates.rst:226
msgid "Includable templates"
msgstr ""

#: ../../source/templates.rst:228
#, python-format
msgid ""
"If you are copy-pasting the same content across many templates, it's "
"better to create an includable template and reuse it with ``{% include "
"%}``."
msgstr ""

#: ../../source/templates.rst:232
msgid ""
"For example, if your game has instructions that need to be repeated on "
"every page, make a template called ``instructions.html``, and put the "
"instructions there, for example:"
msgstr ""

#: ../../source/templates.rst:252
msgid ""
"If you are using oTree Studio, click the button to include a template. "
"Otherwise, create the file in your ``templates`` folder, and see the "
"sample games for examples of how to include the template (e.g. "
"``instructions_template``)."
msgstr ""

#: ../../source/templates.rst:258
msgid "JavaScript and CSS"
msgstr ""

#: ../../source/templates.rst:261
msgid "Where to put JavaScript/CSS code"
msgstr ""

#: ../../source/templates.rst:263
msgid ""
"You can put JavaScript and CSS anywhere just by using the usual "
"``<script></script>`` or ``<style></style>``, anywhere in your template."
msgstr ""

#: ../../source/templates.rst:266
msgid ""
"If you have a lot of scripts/styles, you can put them in separate blocks "
"outside of ``content``: ``scripts`` and ``styles``. It's not mandatory to"
" do this, but: it keeps your code organized and ensures that things are "
"loaded in the correct order (CSS, then your page content, then "
"JavaScript)."
msgstr ""

#: ../../source/templates.rst:274
msgid "Customizing the theme"
msgstr ""

#: ../../source/templates.rst:276
msgid ""
"If you want to customize the appearance of an oTree element, here is the "
"list of CSS selectors:"
msgstr ""

#: ../../source/templates.rst:280
msgid "Element"
msgstr ""

#: ../../source/templates.rst:280
msgid "CSS/jQuery selector"
msgstr ""

#: ../../source/templates.rst:282
msgid "Page body"
msgstr ""

#: ../../source/templates.rst:282
msgid "``.otree-body``"
msgstr ""

#: ../../source/templates.rst:283
msgid "Page title"
msgstr ""

#: ../../source/templates.rst:283
msgid "``.otree-title``"
msgstr ""

#: ../../source/templates.rst:284
msgid "Wait page (entire dialog)"
msgstr ""

#: ../../source/templates.rst:284
msgid "``.otree-wait-page``"
msgstr ""

#: ../../source/templates.rst:285
msgid "Wait page dialog title"
msgstr ""

#: ../../source/templates.rst:285
msgid "``.otree-wait-page__title`` (note: ``__``, not ``_``)"
msgstr ""

#: ../../source/templates.rst:286
msgid "Wait page dialog body"
msgstr ""

#: ../../source/templates.rst:286
msgid "``.otree-wait-page__body``"
msgstr ""

#: ../../source/templates.rst:287
msgid "Timer"
msgstr ""

#: ../../source/templates.rst:287
msgid "``.otree-timer``"
msgstr ""

#: ../../source/templates.rst:288
msgid "Next button"
msgstr ""

#: ../../source/templates.rst:288
msgid "``.otree-btn-next``"
msgstr ""

#: ../../source/templates.rst:289
msgid "Form errors alert"
msgstr ""

#: ../../source/templates.rst:289
msgid "``.otree-form-errors``"
msgstr ""

#: ../../source/templates.rst:292
msgid ""
"For example, to change the page width, put CSS in your base template like"
" this:"
msgstr ""

#: ../../source/templates.rst:302
msgid ""
"To get more info, in your browser, right-click the element you want to "
"modify and select \"Inspect\". Then you can navigate to see the different"
" elements and try modifying their styles:"
msgstr ""

#: ../../source/templates.rst:308
msgid ""
"When possible, use one of the official selectors above. Don't use any "
"selector that starts with ``_otree``, and don't select based on Bootstrap"
" classes like ``btn-primary`` or ``card``, because those are unstable."
msgstr ""

#: ../../source/templates.rst:317
msgid "Passing data from Python to JavaScript (js_vars)"
msgstr ""

#: ../../source/templates.rst:319
msgid ""
"To pass data to JavaScript code in your template, define a method "
"``js_vars`` on your Page, for example:"
msgstr ""

#: ../../source/templates.rst:329
msgid "Then, in your template, you can refer to these variables:"
msgstr ""

#: ../../source/templates.rst:338
msgid ""
"(An alternative is to use the ``|json`` filter in the template, e.g. "
"``let x = {{ player.payoff|json }};``, but ``js_vars`` is simpler."
msgstr ""

#: ../../source/templates.rst:343
msgid "Bootstrap"
msgstr ""

#: ../../source/templates.rst:345
msgid ""
"oTree comes with `Bootstrap "
"<https://getbootstrap.com/docs/4.0/components/alerts/>`__, a popular "
"library for customizing a website's user interface."
msgstr ""

#: ../../source/templates.rst:348
msgid ""
"You can use it if you want a `custom style "
"<http://getbootstrap.com/css/>`__, or a `specific component "
"<http://getbootstrap.com/components/>`__ like a table, alert, progress "
"bar, label, etc. You can even make your page dynamic with elements like "
"`popovers <https://getbootstrap.com/docs/4.0/components/popovers/>`__, "
"`modals <https://getbootstrap.com/docs/4.0/components/modal/>`__, and "
"`collapsible text "
"<https://getbootstrap.com/docs/4.0/components/collapse/>`__."
msgstr ""

#: ../../source/templates.rst:355
msgid ""
"To use Bootstrap, usually you add a ``class=`` attribute to your HTML "
"element."
msgstr ""

#: ../../source/templates.rst:358
msgid "For example, the following HTML will create a \"Success\" alert:"
msgstr ""

#: ../../source/templates.rst:365
msgid "Mobile devices"
msgstr ""

#: ../../source/templates.rst:367
msgid ""
"Bootstrap tries to show a \"mobile friendly\" version when viewed on a "
"smartphone or tablet."
msgstr ""

#: ../../source/templates.rst:372
msgid "Charts"
msgstr ""

#: ../../source/templates.rst:374
msgid ""
"You can use any HTML/JavaScript library for adding charts to your app. A "
"good option is `HighCharts <http://www.highcharts.com/demo>`__, to draw "
"pie charts, line graphs, bar charts, time series, etc."
msgstr ""

#: ../../source/templates.rst:378
msgid "First, include the HighCharts JavaScript::"
msgstr ""

#: ../../source/templates.rst:383
msgid ""
"Go to the HighCharts `demo site <http://www.highcharts.com/demo>`__ and "
"find the chart type that you want to make. Then click \"edit in "
"JSFiddle\" to edit it to your liking, using hardcoded data."
msgstr ""

#: ../../source/templates.rst:388
msgid ""
"Then, copy-paste the JS and HTML into your template, and load the page. "
"If you don't see your chart, it may be because your HTML is missing the "
"``<div>`` that your JS code is trying to insert the chart into."
msgstr ""

#: ../../source/templates.rst:393
msgid ""
"Once your chart is loading properly, you can replace the hardcoded data "
"like ``series`` and ``categories`` with dynamically generated variables."
msgstr ""

#: ../../source/templates.rst:396
msgid "For example, change this::"
msgstr ""

#: ../../source/templates.rst:406
msgid "To this::"
msgstr ""

#: ../../source/templates.rst:411
msgid ""
"...where ``highcharts_series`` is a variable you defined in :ref:`js_vars"
" <js_vars>`."
msgstr ""

#: ../../source/templates.rst:413
msgid ""
"If your chart is not loading, click \"View Source\" in your browser and "
"check if there is something wrong with the data you dynamically "
"generated."
msgstr ""

