# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, oTree team
# This file is distributed under the same license as the oTree package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: oTree \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-19 01:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/timeouts.rst:4
msgid "Timeouts"
msgstr ""

#: ../../source/timeouts.rst:7
msgid "Basics"
msgstr ""

#: ../../source/timeouts.rst:12
msgid "timeout_seconds"
msgstr ""

#: ../../source/timeouts.rst:14
msgid "To set a time limit on your page, add ``timeout_seconds``:"
msgstr ""

#: ../../source/timeouts.rst:21
msgid "After the time runs out, the page auto-submits."
msgstr ""

#: ../../source/timeouts.rst:23
msgid ""
"If you are running the production server (``prodserver``), the page will "
"always submit, even if the user closes their browser window. However, "
"this does not occur if you are running the development server "
"(``zipserver`` or ``devserver``)."
msgstr ""

#: ../../source/timeouts.rst:28
msgid ""
"If you need the timeout to be dynamically determined, use "
":ref:`get_timeout_seconds`."
msgstr ""

#: ../../source/timeouts.rst:33
msgid "timeout_happened"
msgstr ""

#: ../../source/timeouts.rst:35
msgid "You can check if the page was submitted by timeout:"
msgstr ""

#: ../../source/timeouts.rst:47
msgid "``timeout_happened`` only exists in ``before_next_page``."
msgstr ""

#: ../../source/timeouts.rst:52
msgid "get_timeout_seconds"
msgstr ""

#: ../../source/timeouts.rst:54
msgid ""
"This is a more flexible alternative to ``timeout_seconds``, so that you "
"can make the timeout depend on ``self.player``, ``self.session``, etc."
msgstr ""

#: ../../source/timeouts.rst:57
msgid "For example:"
msgstr ""

#: ../../source/timeouts.rst:67
msgid ""
"Or, using a custom session config parameter (see "
":ref:`session_config_treatments`)."
msgstr ""

#: ../../source/timeouts.rst:78
msgid "Advanced techniques"
msgstr ""

#: ../../source/timeouts.rst:83
msgid "Forms submitted by timeout"
msgstr ""

#: ../../source/timeouts.rst:85
msgid ""
"If a form is auto-submitted because of a timeout, oTree will try to save "
"whichever fields were filled out at the time of submission. If a field in"
" the form has an error because it is missing or invalid, it will be set "
"to ``0`` for numeric fields, ``False`` for boolean fields, and the empty "
"string ``''`` for string fields."
msgstr ""

#: ../../source/timeouts.rst:91
msgid ""
"If you want to discard the auto-submitted values, you can just check if "
"``self.timeout_happened``, and if so, overwrite the values."
msgstr ""

#: ../../source/timeouts.rst:94
msgid ""
"If the ``error_message()`` method fails, then the whole form might be "
"invalid, so the whole form will be discarded."
msgstr ""

#: ../../source/timeouts.rst:98
msgid "Timeouts that span multiple pages"
msgstr ""

#: ../../source/timeouts.rst:100
msgid ""
"You can use ``get_timeout_seconds`` to create timeouts that span multiple"
" pages, or even the entire session. The trick is to define a fixed "
"\"expiration time\", and then on each page, make ``get_timeout_seconds`` "
"return the number of seconds until that expiration time."
msgstr ""

#: ../../source/timeouts.rst:105
msgid ""
"First, choose a place to start the timer. This could be a page called "
"\"Start\" that displays text like \"Press the button when you're ready to"
" start\". When the user clicks the \"next\" button, ``before_next_page`` "
"will be executed:"
msgstr ""

#: ../../source/timeouts.rst:121
msgid ""
"(You could also start the timer in ``after_all_players_arrive`` or "
"``creating_session``, and it could be stored in ``session.vars`` if it's "
"the same for everyone in the session.)"
msgstr ""

#: ../../source/timeouts.rst:124
msgid ""
"Then, each page's ``get_timeout_seconds`` should be the number of seconds"
" until that expiration time:"
msgstr ""

#: ../../source/timeouts.rst:134
msgid ""
"When time runs out, ``get_timeout_seconds`` will return 0 or a negative "
"value, which will result in the page loading and being auto-submitted "
"right away. This means all the remaining pages will quickly flash on the "
"participant's screen, which is usually undesired. So, you should use "
"``is_displayed`` to skip the page if there's not enough time for the "
"participant to realistically read the whole page."
msgstr ""

#: ../../source/timeouts.rst:151
msgid ""
"(If you are curious how to avoid repeating this code on every page, see "
"the section on :ref:`composition <composition>` for some hints.)"
msgstr ""

#: ../../source/timeouts.rst:153
msgid ""
"The default text on the timer says \"Time left to complete this page:\". "
"But if your timeout spans multiple pages, you should word it more "
"accurately, by setting ``timer_text``:"
msgstr ""

#: ../../source/timeouts.rst:169
msgid "Customizing the timer"
msgstr ""

#: ../../source/timeouts.rst:172
msgid "Hiding the timer"
msgstr ""

#: ../../source/timeouts.rst:174
msgid "If you want to hide the timer, use this CSS:"
msgstr ""

#: ../../source/timeouts.rst:185
msgid "Changing the timer's behavior"
msgstr ""

#: ../../source/timeouts.rst:187
msgid ""
"The timer's functionality is provided by `jQuery Countdown "
"<http://hilios.github.io/jQuery.countdown/documentation.html>`__. You can"
" change its behavior by attaching and removing event handlers with "
"jQuery's ``.on()`` and ``off()``."
msgstr ""

#: ../../source/timeouts.rst:192
msgid ""
"oTree sets handlers for the events ``update.countdown`` and "
"``finish.countdown``, so if you want to modify those, you can detach them"
" with ``off()``, and/or add your own handler with ``on()``. The countdown"
" element is ``.otree-timer__time-left``."
msgstr ""

#: ../../source/timeouts.rst:197
msgid "For example, to hide the timer until there is only 10 seconds left,"
msgstr ""

#: ../../source/timeouts.rst:217
msgid ""
"(To apply this to all pages, see the instructions in :ref:`base-"
"template`.)"
msgstr ""

#: ../../source/timeouts.rst:219
msgid ""
"Note: even if you turn off the ``finish.countdown`` event handler from "
"submitting the page, if you are running the timeoutworker, the page will "
"be submitted on the server side. So, instead you should use the technique"
" described in :ref:`soft-timeout`."
msgstr ""

#: ../../source/timeouts.rst:226
msgid "Timeout that doesn't submit the page"
msgstr ""

#: ../../source/timeouts.rst:228
msgid ""
"If you just want a soft timeout, you don't need to use the built-in timer"
" at all. Instead, make your own with JavaScript, for example:"
msgstr ""

#: ../../source/timeouts.rst:241
msgid "Minimum time on page"
msgstr ""

#: ../../source/timeouts.rst:243
msgid ""
"If you want to require the user to spend *at least* a certain amount of "
"time on a page, you can use some simple JavaScript: hide the next button "
"(use the ``.otree-btn-next`` selector), then use ``setTimeout`` to re-"
"display it after a certain amount of time."
msgstr ""

#: ../../source/timeouts.rst:248
msgid ""
"In addition, you can also use :ref:`error_message <error_message>`. "
"Assuming you previously set a field like ``expiry_time`` on the player, "
"then use this:"
msgstr ""

