# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, oTree team
# This file is distributed under the same license as the oTree package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: oTree \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 18:05-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/treatments.rst:5
msgid "Treatments"
msgstr ""

#: ../../source/treatments.rst:7
msgid ""
"To assign participants to different treatment groups, you can use "
"``creating_session``. For example:"
msgstr ""

#: ../../source/treatments.rst:21
msgid ""
"You can also assign treatments at the group level (put the "
"``BooleanField`` in ``Group`` and change the above code to use "
"``get_groups()`` and ``group.time_pressure``)."
msgstr ""

#: ../../source/treatments.rst:24
msgid ""
"``creating_session`` is run immediately when you click the \"create "
"session\" button, even if the app is not first in the ``app_sequence``."
msgstr ""

#: ../../source/treatments.rst:28
msgid "Treatment groups & multiple rounds"
msgstr ""

#: ../../source/treatments.rst:30
msgid ""
"If your game has multiple rounds, a player could have different "
"treatments in different rounds, because ``creating_session`` gets "
"executed for each round independently. To prevent this, set it on the "
"participant, rather than the player:"
msgstr ""

#: ../../source/treatments.rst:43
msgid "Balanced treatment groups"
msgstr ""

#: ../../source/treatments.rst:45
msgid ""
"The above code makes a random drawing independently for each player, so "
"you may end up with an imbalance. To solve this, you can use "
"``itertools.cycle``:"
msgstr ""

#: ../../source/treatments.rst:61
msgid "Choosing which treatment to play"
msgstr ""

#: ../../source/treatments.rst:63
msgid ""
"In a live experiment, you often want to give a player a random treatment."
" But when you are testing your game, it is often useful to choose "
"explicitly which treatment to play. Let's say you are developing the game"
" from the above example and want to show your colleagues both treatments."
" You can create 2 session configs that are the same, except for one "
"parameter (in oTree Studio, add a \"custom parameter\"):"
msgstr ""

#: ../../source/treatments.rst:87
msgid "Then in your code you can get the current session's treatment with:"
msgstr ""

#: ../../source/treatments.rst:93
msgid ""
"You can even combine this with the randomization approach. You can check "
"``if 'time_pressure' in session.config:``; if yes, then use that; if no, "
"then choose it randomly."
msgstr ""

#: ../../source/treatments.rst:100
msgid "Configure sessions"
msgstr ""

#: ../../source/treatments.rst:102
msgid ""
"You can make your session configurable, so that you can adjust the game's"
" parameters in the admin interface."
msgstr ""

#: ../../source/treatments.rst:108
msgid ""
"For example, let's say you have a \"num_apples\" parameter. The usual "
"approach would be to define it in ``Constants``, e.g. "
"``Constants.num_apples``. But to make it configurable, you can instead "
"define it in your session config. For example:"
msgstr ""

#: ../../source/treatments.rst:124
msgid ""
"When you create a session in the admin interface, there will be a text "
"box to change this number. You can also add help text with ``'doc'``:"
msgstr ""

#: ../../source/treatments.rst:141
msgid "In your app's code, you can do ``session.config['num_apples']``."
msgstr ""

#: ../../source/treatments.rst:143
msgid "Notes:"
msgstr ""

#: ../../source/treatments.rst:145
msgid ""
"For a parameter to be configurable, its value must be a number, boolean, "
"or string."
msgstr ""

#: ../../source/treatments.rst:146
msgid ""
"On the \"Demo\" section of the admin, sessions are not configurable. It's"
" only available when creating a session in \"Sessions\" or \"Rooms\"."
msgstr ""

#~ msgid ""
#~ "You can also assign treatments at "
#~ "the group level (put the ``StringField``"
#~ " in ``Group`` and change the above"
#~ " code to use ``get_groups()`` and "
#~ "``group.color``)."
#~ msgstr ""

#~ msgid ""
#~ "If your game has multiple rounds, "
#~ "a player could have different colors "
#~ "in different rounds, because "
#~ "``creating_session`` gets executed for each"
#~ " round independently. To prevent this, "
#~ "set it on the participant, rather "
#~ "than the player:"
#~ msgstr ""

#~ msgid ""
#~ "Then elsewhere in your code, you "
#~ "can access the participant's color with"
#~ " ``participant.vars['color']``."
#~ msgstr ""

#~ msgid "For more on vars, see :ref:`vars`."
#~ msgstr ""

#~ msgid ""
#~ "The above code makes a random "
#~ "drawing independently for each player, "
#~ "so you may end up with an "
#~ "imbalance between \"blue\" and \"red\". "
#~ "To solve this, you can use "
#~ "``itertools.cycle``:"
#~ msgstr ""

#~ msgid ""
#~ "In a live experiment, you often "
#~ "want to give a player a random "
#~ "treatment. But when you are testing "
#~ "your game, it is often useful to"
#~ " choose explicitly which treatment to "
#~ "play. Let's say you are developing "
#~ "the game from the above example "
#~ "and want to show your colleagues "
#~ "both treatments (red and blue). You "
#~ "can create 2 session configs that "
#~ "are the same, except for ``color`` "
#~ "(in oTree Studio, add a \"custom "
#~ "parameter\"):"
#~ msgstr ""

#~ msgid ""
#~ "Then in your code you can get "
#~ "the current session's color with "
#~ "``session.config['color'].``"
#~ msgstr ""

#~ msgid ""
#~ "You can even combine this with the"
#~ " randomization approach. You can check "
#~ "``if 'color' in session.config:``; if "
#~ "yes, then use that color; if no,"
#~ " then choose it randomly."
#~ msgstr ""

