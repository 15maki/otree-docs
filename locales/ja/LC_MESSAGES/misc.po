# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, oTree team
# This file is distributed under the same license as the oTree package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: oTree \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-06 17:13-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/misc/advanced.rst:2
msgid "Advanced features"
msgstr ""

#: ../../source/misc/advanced.rst:4 ../../source/misc/bots_advanced.rst:6
msgid "These are advanced features that are mostly unsupported in oTree Studio."
msgstr ""

#: ../../source/misc/advanced.rst:9
msgid "ExtraModel"
msgstr ""

#: ../../source/misc/advanced.rst:11
msgid ""
"An ExtraModel is useful when you need to store dozens or hundreds of data"
" points about a single player. For example, a list of bids, or a list of "
"stimuli and reaction times. They are frequently used together with "
":ref:`live`."
msgstr ""

#: ../../source/misc/advanced.rst:15
msgid ""
"There are a bunch of examples `here <https://www.otreehub.com/projects"
"/otree-more-demos/>`__."
msgstr ""

#: ../../source/misc/advanced.rst:17
msgid "An ExtraModel should link to another model:"
msgstr ""

#: ../../source/misc/advanced.rst:25
msgid "Each time the user makes a bid, you store it in the database:"
msgstr ""

#: ../../source/misc/advanced.rst:31
msgid "Later, you can retrieve the list of a player's bids:"
msgstr ""

#: ../../source/misc/advanced.rst:37
msgid "An ExtraModel can have multiple links:"
msgstr ""

#: ../../source/misc/advanced.rst:48
msgid "Then you can query it in various ways:"
msgstr ""

#: ../../source/misc/advanced.rst:55
msgid "For more complex filters and sorting, you should use list operations:"
msgstr ""

#: ../../source/misc/advanced.rst:61
msgid ""
"See the example psychology games such as the Stroop task, which show how "
"to generate ExtraModel data from each row of a CSV spreadsheet."
msgstr ""

#: ../../source/misc/advanced.rst:65
msgid "Templates"
msgstr ""

#: ../../source/misc/advanced.rst:68
msgid "template_name"
msgstr ""

#: ../../source/misc/advanced.rst:70
msgid ""
"If the template needs to have a different name from your page class (e.g."
" you are sharing the same template for multiple pages), set "
"``template_name``. Example:"
msgstr ""

#: ../../source/misc/advanced.rst:82
msgid "CSS/JS and base templates"
msgstr ""

#: ../../source/misc/advanced.rst:84
msgid ""
"To include the same JS/CSS in all pages of an app, either put it in a "
"ref:`static file <staticfiles>` or put it in an includable template."
msgstr ""

#: ../../source/misc/advanced.rst:90
msgid "Static files"
msgstr ""

#: ../../source/misc/advanced.rst:92
msgid ""
"Here is how to include images (or any other static file like .css, .js, "
"etc.) in your pages."
msgstr ""

#: ../../source/misc/advanced.rst:94
msgid ""
"At the root of your oTree project, there is a ``_static/`` folder. Put a "
"file there, for example ``puppy.jpg``. Then, in your template, you can "
"get the URL to that file with ``{{ static 'puppy.jpg' }}``."
msgstr ""

#: ../../source/misc/advanced.rst:99
msgid "To display an image, use the ``<img>`` tag, like this:"
msgstr ""

#: ../../source/misc/advanced.rst:105
msgid ""
"Above we saved our image in ``_static/puppy.jpg``, But actually it's "
"better to make a subfolder with the name of your app, and save it as "
"``_static/your_app_name/puppy.jpg``, to keep files organized and prevent "
"name conflicts."
msgstr ""

#: ../../source/misc/advanced.rst:110
msgid "Then your HTML code becomes:"
msgstr ""

#: ../../source/misc/advanced.rst:116
msgid ""
"(If you prefer, you can also put static files inside your app folder, in "
"a subfolder called ``static/your_app_name``.)"
msgstr ""

#: ../../source/misc/advanced.rst:119
msgid ""
"If a static file is not updating even after you changed it, this is "
"because your browser cached the file. Do a full page reload (usually "
"Ctrl+F5)"
msgstr ""

#: ../../source/misc/advanced.rst:123
msgid ""
"If you have videos or high-resolution images, it's preferable to store "
"them somewhere online and reference them by URL because the large file "
"size can make uploading your .otreezip file much slower."
msgstr ""

#: ../../source/misc/advanced.rst:130
msgid "Wait pages"
msgstr ""

#: ../../source/misc/advanced.rst:135
msgid "Custom wait page template"
msgstr ""

#: ../../source/misc/advanced.rst:137
msgid ""
"You can make a custom wait page template. For example, save this to "
"``your_app_name/templates/your_app_name/MyWaitPage.html``:"
msgstr ""

#: ../../source/misc/advanced.rst:150
msgid "Then tell your wait page to use this template:"
msgstr ""

#: ../../source/misc/advanced.rst:157
msgid ""
"Then you can use ``vars_for_template`` in the usual way. Actually, the "
"``body_text`` and ``title_text`` attributes are just shorthand for "
"setting ``vars_for_template``; the following 2 code snippets are "
"equivalent:"
msgstr ""

#: ../../source/misc/advanced.rst:175
msgid ""
"If you want to apply your custom wait page template globally, save it to "
"``_templates/global/WaitPage.html``. oTree will then automatically use it"
" everywhere instead of the built-in wait page."
msgstr ""

#: ../../source/misc/advanced.rst:181
msgid "Currency"
msgstr ""

#: ../../source/misc/advanced.rst:183
msgid ""
"To customize the name \"points\" to something else like \"tokens\" or "
"\"credits\", set ``POINTS_CUSTOM_NAME``, e.g. ``POINTS_CUSTOM_NAME = "
"'tokens'``."
msgstr ""

#: ../../source/misc/advanced.rst:186
msgid ""
"You can change the number of decimal places in real world currency "
"amounts with the setting ``REAL_WORLD_CURRENCY_DECIMAL_PLACES``. If the "
"extra decimal places show up but are always 0, then you should reset the "
"database."
msgstr ""

#: ../../source/misc/advanced.rst:192
msgid "Reading CSV or other files"
msgstr ""

#: ../../source/misc/advanced.rst:194
msgid ""
"Store yourfile.csv in your app folder. Then put this code anywhere you "
"want to read the file (in a function or in Constants):"
msgstr ""

#: ../../source/misc/advanced.rst:204
msgid ""
"If it's not CSV and you just want to read the file contents as a string, "
"this gets simplified to:"
msgstr ""

#: ../../source/misc/bots_advanced.rst:4
msgid "Bots: advanced features"
msgstr ""

#: ../../source/misc/bots_advanced.rst:11
msgid "Command line bots"
msgstr ""

#: ../../source/misc/bots_advanced.rst:13
msgid ""
"An alternative to running bots in your web browser is to run them in the "
"command line. Command line bots run faster and require less setup."
msgstr ""

#: ../../source/misc/bots_advanced.rst:16
#: ../../source/misc/bots_advanced.rst:51
msgid "Run this::"
msgstr ""

#: ../../source/misc/bots_advanced.rst:20
msgid ""
"To test with a specific number of participants (otherwise it will default"
" to ``num_demo_participants``)::"
msgstr ""

#: ../../source/misc/bots_advanced.rst:25
msgid "To run tests for all session configs::"
msgstr ""

#: ../../source/misc/bots_advanced.rst:30
msgid "Exporting data"
msgstr ""

#: ../../source/misc/bots_advanced.rst:32
msgid "Use the ``--export`` flag to export the results to a CSV file::"
msgstr ""

#: ../../source/misc/bots_advanced.rst:36
msgid "To specify the folder where the data is saved, do::"
msgstr ""

#: ../../source/misc/bots_advanced.rst:42
msgid "Command-line browser bots"
msgstr ""

#: ../../source/misc/bots_advanced.rst:44
msgid ""
"You can launch browser bots from the command line, using ``otree "
"browser_bots``."
msgstr ""

#: ../../source/misc/bots_advanced.rst:46
msgid ""
"Make sure Google Chrome is installed, or set ``BROWSER_COMMAND`` in "
"``settings.py`` (more info below)."
msgstr ""

#: ../../source/misc/bots_advanced.rst:48
msgid "Set ``OTREE_REST_KEY`` env var as described in :ref:`rest`."
msgstr ""

#: ../../source/misc/bots_advanced.rst:49
msgid "Run your server"
msgstr ""

#: ../../source/misc/bots_advanced.rst:50
msgid "Close all Chrome windows."
msgstr ""

#: ../../source/misc/bots_advanced.rst:55
msgid ""
"This will launch several Chrome tabs and run the bots. When finished, the"
" tabs will close, and you will see a report in your terminal window."
msgstr ""

#: ../../source/misc/bots_advanced.rst:59
msgid ""
"If Chrome doesn't close windows properly, make sure you closed all Chrome"
" windows prior to launching the command."
msgstr ""

#: ../../source/misc/bots_advanced.rst:63
msgid "Command-line browser bots on a remote server (e.g. Heroku)"
msgstr ""

#: ../../source/misc/bots_advanced.rst:65
msgid ""
"If the server is running on a host/port other than the usual "
"``http://localhost:8000``, you need to pass ``--server-url``. For "
"example, if it's on Heroku, you would do like this::"
msgstr ""

#: ../../source/misc/bots_advanced.rst:73
msgid "Choosing session configs and sizes"
msgstr ""

#: ../../source/misc/bots_advanced.rst:75
msgid "You can specify the number of participants::"
msgstr ""

#: ../../source/misc/bots_advanced.rst:79
msgid "To test all session configs, just run this::"
msgstr ""

#: ../../source/misc/bots_advanced.rst:85
msgid "Browser bots: misc notes"
msgstr ""

#: ../../source/misc/bots_advanced.rst:87
msgid ""
"You can use a browser other than Chrome by setting ``BROWSER_COMMAND`` in"
" ``settings.py``. Then, oTree will open the browser by doing something "
"like ``subprocess.Popen(settings.BROWSER_COMMAND)``."
msgstr ""

#: ../../source/misc/bots_advanced.rst:94
msgid "Test cases"
msgstr ""

#: ../../source/misc/bots_advanced.rst:96
msgid ""
"You can define an attribute ``cases`` on your PlayerBot class that lists "
"different test cases. For example, in a public goods game, you may want "
"to test 3 scenarios:"
msgstr ""

#: ../../source/misc/bots_advanced.rst:100
msgid "All players contribute half their endowment"
msgstr ""

#: ../../source/misc/bots_advanced.rst:101
msgid "All players contribute nothing"
msgstr ""

#: ../../source/misc/bots_advanced.rst:102
msgid "All players contribute their entire endowment (100 points)"
msgstr ""

#: ../../source/misc/bots_advanced.rst:104
msgid ""
"We can call these 3 test cases \"basic\", \"min\", and \"max\", "
"respectively, and put them in ``cases``. Then, oTree will execute the bot"
" 3 times, once for each test case. Each time, a different value from "
"``cases`` will be assigned to ``self.case`` in the bot."
msgstr ""

#: ../../source/misc/bots_advanced.rst:109
msgid "For example:"
msgstr ""

#: ../../source/misc/bots_advanced.rst:148
msgid ""
"If you use cases, it's better to use :ref:`cli-bots` since browser bots "
"will only execute a single case."
msgstr ""

#: ../../source/misc/bots_advanced.rst:150
msgid ""
"``cases`` needs to be a list, but it can contain any data type, such as "
"strings, integers, or even dictionaries. Here is a trust game bot that "
"uses dictionaries as cases."
msgstr ""

#: ../../source/misc/bots_advanced.rst:188
msgid "error_fields"
msgstr ""

#: ../../source/misc/bots_advanced.rst:190
msgid ""
"When using ``SubmissionMustFail`` on forms with multiple fields, you can "
"use ``error_fields`` for extra thoroughness."
msgstr ""

#: ../../source/misc/bots_advanced.rst:193
msgid ""
"For example, let's say we a submit a valid ``age``, but an invalid "
"``weight`` and ``height``:"
msgstr ""

#: ../../source/misc/bots_advanced.rst:207
msgid ""
"What's missing is that the bot system doesn't tell us exactly *why* the "
"submission fails. Is it an invalid ``weight``, ``height``, or both? "
"``error_fields`` can resolve the ambiguity:"
msgstr ""

#: ../../source/misc/bots_advanced.rst:223
msgid ""
"This will verify that ``weight`` and ``height`` contained errors, but "
"``age`` did not."
msgstr ""

#: ../../source/misc/bots_advanced.rst:226
msgid ""
"If :ref:`error_message <error_message>` returns an error, then "
"``error_fields`` will be ``['__all__']``."
msgstr ""

#: ../../source/misc/bots_advanced.rst:230
msgid "Misc note"
msgstr ""

#: ../../source/misc/bots_advanced.rst:232
msgid ""
"In bots, it is risky to assign ``player = self.player`` (or ``participant"
" = self.participant``, etc), even though that kind of code is encouraged "
"elsewhere."
msgstr ""

#: ../../source/misc/bots_advanced.rst:236
msgid "Because if there is a ``yield`` in between, the data can be stale:"
msgstr ""

#: ../../source/misc/bots_advanced.rst:247
msgid ""
"It's safer to use ``self.player.money_left`` directly, because doing "
"``self.player`` gets the most recent data from the database."
msgstr ""

#: ../../source/misc/bots_advanced.rst:251
msgid "Live pages"
msgstr ""

#: ../../source/misc/bots_advanced.rst:253
msgid ""
"To test live methods with bots, define ``call_live_method`` as a top-"
"level function in ``tests.py``. (Not available in oTree Studio.) This "
"function should simulate the sequence of calls to your ``live_method``. "
"The argument ``method`` simulates the live method on your Player model. "
"For example, ``method(3, 'hello')`` calls the live method on Player 3 "
"with ``data`` set to ``'hello'``. For example:"
msgstr ""

#: ../../source/misc/bots_advanced.rst:269
msgid "``kwargs`` contains at least the following parameters."
msgstr ""

#: ../../source/misc/bots_advanced.rst:271
msgid "``case`` as described in :ref:`cases`."
msgstr ""

#: ../../source/misc/bots_advanced.rst:272
msgid "``page_class``: the current page class, e.g. ``pages.MyPage``."
msgstr ""

#: ../../source/misc/bots_advanced.rst:273
msgid "``round_number``"
msgstr ""

#: ../../source/misc/bots_advanced.rst:275
msgid ""
"``call_live_method`` will be automatically executed when the fastest bot "
"in the group arrives on a page with ``live_method``. (Other bots may be "
"on previous pages at that point, unless you restrict this with a "
"WaitPage.)"
msgstr ""

#: ../../source/misc/intro.rst:2
msgid "Miscellaneous"
msgstr ""

#: ../../source/misc/rest_api.rst:4
msgid "REST"
msgstr ""

#: ../../source/misc/rest_api.rst:6
msgid ""
"oTree has a REST API that enables external programs (such as other "
"websites) to communicate with oTree."
msgstr ""

#: ../../source/misc/rest_api.rst:9
msgid ""
"A REST API is just a URL on your server that is designed to be accessed "
"by programs, rather than being opened manually in a web browser."
msgstr ""

#: ../../source/misc/rest_api.rst:12
msgid ""
"One project that uses the REST API a lot is `oTree HR <https://github.com"
"/oTree-org/HR>`__."
msgstr ""

#: ../../source/misc/rest_api.rst:16
msgid "As of March 2021, there have been some breaking changes to the REST API."
msgstr ""

#: ../../source/misc/rest_api.rst:21
msgid "Setup"
msgstr ""

#: ../../source/misc/rest_api.rst:25
msgid "*\"Where should I put this code?\"*"
msgstr ""

#: ../../source/misc/rest_api.rst:27
msgid ""
"This code does not need to go inside your oTree project folder. Since the"
" point of the REST API is to allow external programs and servers to "
"communicate with oTree across the internet, you should put this code in "
"that other program. That also means you should use whatever language that"
" other server uses. The examples on this page use Python, but it's simple"
" to make HTTP requests using any programming language, or tools like "
"webhooks or cURL."
msgstr ""

#: ../../source/misc/rest_api.rst:62
msgid "\"oTree version\" endpoint"
msgstr ""

#: ../../source/misc/rest_api.rst:66 ../../source/misc/rest_api.rst:83
#: ../../source/misc/rest_api.rst:102
msgid "New beta feature as of March 2021."
msgstr ""

#: ../../source/misc/rest_api.rst:68
msgid "GET URL: ``/api/otree_version/``"
msgstr ""

#: ../../source/misc/rest_api.rst:71 ../../source/misc/rest_api.rst:90
#: ../../source/misc/rest_api.rst:107 ../../source/misc/rest_api.rst:140
#: ../../source/misc/rest_api.rst:179 ../../source/misc/rest_api.rst:204
#: ../../source/misc/rest_api.rst:219 ../../source/misc/rest_api.rst:236
msgid "Example"
msgstr ""

#: ../../source/misc/rest_api.rst:79
msgid "\"Session configs\" endpoint"
msgstr ""

#: ../../source/misc/rest_api.rst:85
msgid "GET URL: ``/api/session_configs/``"
msgstr ""

#: ../../source/misc/rest_api.rst:87
msgid ""
"Returns the list of all your session configs, as dicts with all their "
"properties."
msgstr ""

#: ../../source/misc/rest_api.rst:98
msgid "\"Rooms\" endpoint"
msgstr ""

#: ../../source/misc/rest_api.rst:104
msgid "GET URL: ``/api/rooms/``"
msgstr ""

#: ../../source/misc/rest_api.rst:114
msgid ""
"Example output (note it includes ``session_code`` if there is currently a"
" session in the room):"
msgstr ""

#: ../../source/misc/rest_api.rst:126
msgid "\"Create sessions\" endpoint"
msgstr ""

#: ../../source/misc/rest_api.rst:128
msgid "POST URL: ``/api/sessions/``"
msgstr ""

#: ../../source/misc/rest_api.rst:130
msgid ""
"Here are some examples of how the \"create sessions\" endpoint can be "
"used:"
msgstr ""

#: ../../source/misc/rest_api.rst:132
msgid "Other websites can create oTree sessions automatically"
msgstr ""

#: ../../source/misc/rest_api.rst:133
msgid ""
"You can make a fancier alternative to oTree's :ref:`edit_config` "
"interface (e.g. with sliders and visual widgets)"
msgstr ""

#: ../../source/misc/rest_api.rst:135
msgid "Process that will create new oTree sessions on some fixed schedule"
msgstr ""

#: ../../source/misc/rest_api.rst:136
msgid ""
"Command line script to create customized sessions (if ``otree "
"create_session`` is not sufficient)"
msgstr ""

#: ../../source/misc/rest_api.rst:155 ../../source/misc/rest_api.rst:250
msgid "Parameters"
msgstr ""

#: ../../source/misc/rest_api.rst:157
msgid "``session_config_name`` (required)"
msgstr ""

#: ../../source/misc/rest_api.rst:158
msgid "``num_participants`` (required)"
msgstr ""

#: ../../source/misc/rest_api.rst:159
msgid ""
"``modified_session_config_fields``: an optional dict of session config "
"parameters, as discussed in :ref:`edit_config`."
msgstr ""

#: ../../source/misc/rest_api.rst:161
msgid "``room_name`` if you want to create the session in a room."
msgstr ""

#: ../../source/misc/rest_api.rst:166
msgid "\"Get session data\" endpoint"
msgstr ""

#: ../../source/misc/rest_api.rst:170
msgid ""
"New feature as of March 2021. In beta until we get sufficient user "
"feedback."
msgstr ""

#: ../../source/misc/rest_api.rst:173
msgid "GET URL: ``/api/sessions/{code}``"
msgstr ""

#: ../../source/misc/rest_api.rst:175
msgid ""
"This API retrieves data about a session and its participants. If "
"``participant_labels`` is omitted, it returns data for all participants."
msgstr ""

#: ../../source/misc/rest_api.rst:189
msgid "\"Session vars\" endpoint"
msgstr ""

#: ../../source/misc/rest_api.rst:193
msgid ""
"As of April 2021, this endpoint requires you to pass a session code as a "
"path parameter. If the session is in a room, you can get the session code"
" with the ``rooms`` endpoint."
msgstr ""

#: ../../source/misc/rest_api.rst:196
msgid "POST URL: ``/api/session_vars/{session_code}``"
msgstr ""

#: ../../source/misc/rest_api.rst:198
msgid ""
"This endpoint lets you set ``session.vars``. One use is experimenter "
"input. For example, if the experimenter does a lottery drawing in the "
"middle of the experiment, they can input the result by running a script "
"like the one below."
msgstr ""

#: ../../source/misc/rest_api.rst:212
msgid "\"Participant vars\" endpoint"
msgstr ""

#: ../../source/misc/rest_api.rst:214
msgid "POST URL: ``/api/participant_vars/{participant_code}``"
msgstr ""

#: ../../source/misc/rest_api.rst:216
msgid ""
"Pass information about a participant to oTree, via web services / "
"webhooks."
msgstr ""

#: ../../source/misc/rest_api.rst:228
msgid "\"Participant vars for room\" endpoint"
msgstr ""

#: ../../source/misc/rest_api.rst:230
msgid "POST URL: ``/api/participant_vars/``"
msgstr ""

#: ../../source/misc/rest_api.rst:232
msgid ""
"Similar to the other \"participant vars\" endpoint, but this one can be "
"used when you don't have the participant's code. Instead, you identify "
"the participant by the room name and their participant label."
msgstr ""

#: ../../source/misc/rest_api.rst:252
msgid "``room_name`` (required)"
msgstr ""

#: ../../source/misc/rest_api.rst:253
msgid "``participant_label`` (required)"
msgstr ""

#: ../../source/misc/rest_api.rst:254
msgid ""
"``vars`` (required): a dict of participant vars to add. Values can be any"
" JSON-serializable data type, even nested dicts/lists."
msgstr ""

#: ../../source/misc/rest_api.rst:257
msgid ""
"You will need to give participants a link with a ``participant_label``, "
"although this does not need to come from a ``participant_label_file``."
msgstr ""

#: ../../source/misc/rest_api.rst:261
msgid "Authentication"
msgstr ""

#: ../../source/misc/rest_api.rst:263
msgid ""
"If you have set your auth level to DEMO or STUDY, you must authenticate "
"your REST API requests."
msgstr ""

#: ../../source/misc/rest_api.rst:266
msgid ""
"Create an env var (i.e. Heroku config var) ``OTREE_REST_KEY`` on the "
"server. Set it to some secret value."
msgstr ""

#: ../../source/misc/rest_api.rst:269
msgid ""
"When you make a request, add that key as an HTTP header called ``otree-"
"rest-key``. If following the :ref:`setup example <rest-setup>` above, you"
" would set the ``REST_KEY`` variable."
msgstr ""

#: ../../source/misc/rest_api.rst:273
msgid "Demo & testing"
msgstr ""

#: ../../source/misc/rest_api.rst:275
msgid ""
"For convenience during development, you can generate fake vars to "
"simulate data that, in a real session, will come from the REST API."
msgstr ""

#: ../../source/misc/rest_api.rst:278
msgid ""
"In your session config, add the parameter ``mock_exogenous_data=True`` "
"(We call it **exogenous** data because it originates outside oTree.)"
msgstr ""

#: ../../source/misc/rest_api.rst:281
msgid ""
"Then define a function with the same name (``mock_exogenous_data``) in "
"your project's shared_out.py (if you are using a text editor, you may "
"need to create that file)."
msgstr ""

#: ../../source/misc/rest_api.rst:285
msgid "Here's an example:"
msgstr ""

#: ../../source/misc/rest_api.rst:294
msgid "You can also set participant labels here."
msgstr ""

#: ../../source/misc/rest_api.rst:296
msgid ""
"When you run a session in demo mode, or using bots, "
"``mock_exogenous_data()`` will automatically be run after "
"``creating_session``. However, it will not be run if the session is "
"created in a room."
msgstr ""

#: ../../source/misc/rest_api.rst:300
msgid ""
"If you have multiple session configs that require different exogenous "
"data, you can branch like this:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:2
msgid "Tips and tricks"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:5
msgid "Preventing code duplication"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:7
msgid ""
"As much as possible, it's good to avoid copy-pasting the same code in "
"multiple places. Although it sometimes takes a bit of thinking to figure "
"out how to avoid copy-pasting code, you will see that having your code in"
" only one place usually saves you a lot of effort later when you need to "
"change the design of your code or fix bugs."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:14
msgid "Below are some techniques to achieve code reuse."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:17
msgid "Don't make multiple copies of your app"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:19
msgid ""
"If possible, you should avoid copying an app's folder to make a slightly "
"different version, because then you have duplicated code that is harder "
"to maintain."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:22
msgid ""
"If you need multiple rounds, set ``num_rounds``. If you need slightly "
"different versions (e.g. different treatments), then you should use the "
"techniques described in :ref:`treatments`, such as making 2 session "
"configs that have a different ``'treatment'`` parameter, and then "
"checking for ``session.config['treatment']`` in your app's code."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:33
msgid "How to make many fields"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:35
msgid "Let's say your app has many fields that are almost the same, such as:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:84
msgid "This is quite complex; you should look for a way to simplify."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:86
msgid ""
"Are the fields all displayed on separate pages? If so, consider "
"converting this to a 10-round game with just one field."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:89
msgid ""
"If that's not possible, then you can reduce the amount of repeated code "
"by defining a function that returns a field:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:110
msgid "Prevent duplicate pages by using multiple rounds"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:112
msgid ""
"If you have many many pages that are almost the same, consider just "
"having 1 page and looping it for multiple rounds. One sign that your code"
" can be simplified is if it looks something like this:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:134
msgid "Avoid duplicated validation methods"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:136
msgid ""
"If you have many repetitive :ref:`FIELD_error_message "
"<FOO_error_message>` methods, you can replace them with a single "
":ref:`error_message <error_message>` function. For example:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:158
msgid "You can instead define this function on your page:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:179
msgid ""
"(Usually ``error_message`` is used to return a single error message as a "
"string, but you can also return a dict.)"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:184
msgid "Avoid duplicated page functions"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:186
msgid ""
"Any page function can be moved out of the page class, and into a top-"
"level function. This is a handy way to share the same function across "
"multiple pages. For example, let's say many pages need to have these 2 "
"functions:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:205
msgid ""
"You can move those functions before all the pages (remove the "
"``@staticmethod``), and then reference them wherever they need to be "
"used:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:232
msgid ""
"(In the sample games, ``after_all_players_arrive`` and ``live_method`` "
"are frequently defined in this manner.)"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:235
msgid "Improving code performance"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:237
msgid ""
"You should avoid redundant use of ``get_players()``, "
"``get_player_by_id()``, ``in_*_rounds()``, ``get_others_in_group()``, or "
"any other methods that return a player or list of players. These methods "
"all require a database query, which can be slow."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:242
msgid ""
"For example, this code has a redundant query because it asks the database"
" 5 times for the exact same player:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:258
msgid "It should be simplified to this:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:274
msgid "As an added benefit, this usually makes the code more readable."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:277
msgid "Use BooleanField instead of StringField, where possible"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:279
msgid ""
"Many ``StringFields`` should be broken down into ``BooleanFields``, "
"especially if they only have 2 distinct values."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:282
msgid "Suppose you have a field called ``treatment``:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:288
msgid "And let's say ``treatment`` it can only have 4 different values:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:290
msgid "``high_income_high_tax``"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:291
msgid "``high_income_low_tax``"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:292
msgid "``low_income_high_tax``"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:293
msgid "``low_income_low_tax``"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:295
msgid "In your pages, you might use it like this:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:310
msgid "It would be much better to break this to 2 separate BooleanFields::"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:315
msgid "Then your pages could be simplified to:"
msgstr ""

#~ msgid ""
#~ "At the root of your oTree project,"
#~ " there is a ``_static/`` folder. Put"
#~ " a file there, for example "
#~ "``puppy.jpg``. Then, in your template, "
#~ "you can get the URL to that "
#~ "file with ``{% static 'puppy.jpg' %}``."
#~ msgstr ""

#~ msgid ""
#~ "Store yourfile.csv in your app folder."
#~ " Then put this code anywhere you "
#~ "want to read the file (in a "
#~ "method or in Constants):"
#~ msgstr ""

#~ msgid ""
#~ "oTree has a small REST API that"
#~ " enables external programs (such as "
#~ "other websites) to communicate with "
#~ "oTree, in particular:"
#~ msgstr ""

#~ msgid "Create sessions"
#~ msgstr ""

#~ msgid "Add participant vars"
#~ msgstr ""

#~ msgid "Add session vars"
#~ msgstr ""

#~ msgid "Simply make a request to one of the below URLs."
#~ msgstr ""

#~ msgid "\"Create sessions\" REST endpoint"
#~ msgstr ""

#~ msgid "\"Participant vars\" REST endpoint"
#~ msgstr ""

#~ msgid ""
#~ "This endpoint lets you set "
#~ "``participant.vars``. The main purpose is "
#~ "to allow other sites/apps to pass "
#~ "information about a participant to "
#~ "oTree, via web services / webhooks. "
#~ "For example, if the user does a"
#~ " survey on Qualtrics that then links"
#~ " to oTree, you can pass their "
#~ "survey data (like gender, age, etc) "
#~ "into oTree as participant vars. "
#~ "(Qualtrics allows making POST requests "
#~ "through their `web service "
#~ "<https://www.qualtrics.com/support/survey-platform/survey-"
#~ "module/survey-flow/advanced-elements/web-"
#~ "service/>`__ feature.)"
#~ msgstr ""

#~ msgid ""
#~ "This feature requires you to use a"
#~ " Room. Participants are uniquely identified"
#~ " with the combination of room name"
#~ " & participant label. So you will "
#~ "need to give participants a link "
#~ "with a ``participant_label``, although this"
#~ " does not need to come from a"
#~ " ``participant_label_file``."
#~ msgstr ""

#~ msgid "\"Session vars\" REST endpoint"
#~ msgstr ""

#~ msgid "POST URL: ``/api/session_vars/``"
#~ msgstr ""

#~ msgid "``vars`` (required): a dict of session vars to add."
#~ msgstr ""

#~ msgid "This feature requires you to use a Room."
#~ msgstr ""

#~ msgid "Note"
#~ msgstr ""

#~ msgid ""
#~ "If you are using this for "
#~ "experimenter input during an experiment, "
#~ "you may also want to use "
#~ ":ref:`error_message <error_message>`:"
#~ msgstr ""

#~ msgid ""
#~ "When you make a request, add that"
#~ " key as an HTTP header called "
#~ "``otree-rest-key``. For example:"
#~ msgstr ""

#~ msgid ""
#~ "Are the fields all displayed on "
#~ "separate pages? If so, consider "
#~ "converting this to a 10-round game "
#~ "with just one field. See the `real"
#~ " effort <https://github.com/oTree-"
#~ "org/oTree/tree/master/real_effort>`__ sample game "
#~ "for an example of how to just "
#~ "have 1 page that gets looped over"
#~ " many rounds, varying the question "
#~ "that gets displayed with each round."
#~ msgstr ""

#~ msgid ""
#~ "If that's not possible, then you "
#~ "can reduce the amount of repeated "
#~ "code by defining a method that "
#~ "returns a field:"
#~ msgstr ""

#~ msgid ""
#~ "See the `quiz <https://github.com/oTree-"
#~ "org/oTree/tree/master/quiz>`__ or `real effort "
#~ "<https://github.com/oTree-org/oTree/tree/master/real_effort>`__"
#~ " sample games for examples of how "
#~ "to just have 1 page that gets "
#~ "looped over many rounds, varying the "
#~ "question that gets displayed with each"
#~ " round."
#~ msgstr ""

#~ msgid ""
#~ "If you have many repetitive "
#~ ":ref:`FIELD_error_message <FOO_error_message>` methods,"
#~ " you can replace them with a "
#~ "single :ref:`error_message <error_message>` method."
#~ " For example:"
#~ msgstr ""

#~ msgid "You can instead define this method on your page (not Player class):"
#~ msgstr ""

