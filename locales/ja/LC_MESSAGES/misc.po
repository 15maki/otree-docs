# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, oTree team
# This file is distributed under the same license as the oTree package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: oTree \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-29 00:00+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/misc/advanced.rst:2
msgid "Advanced features"
msgstr ""

#: ../../source/misc/advanced.rst:4 ../../source/misc/bots_advanced.rst:6
msgid "These are advanced features that are mostly unsupported in oTree Studio."
msgstr ""

#: ../../source/misc/advanced.rst:7
msgid "Templates"
msgstr ""

#: ../../source/misc/advanced.rst:10
msgid "template_name"
msgstr ""

#: ../../source/misc/advanced.rst:12
msgid ""
"If the template needs to have a different name from your page class (e.g."
" you are sharing the same template for multiple pages), set "
"``template_name``. Example:"
msgstr ""

#: ../../source/misc/advanced.rst:24
msgid "CSS/JS and base templates"
msgstr ""

#: ../../source/misc/advanced.rst:26
msgid ""
"To include the same JS/CSS in all pages of an app, make a base template "
"for the app."
msgstr ""

#: ../../source/misc/advanced.rst:29
msgid ""
"For example, if your app's name is ``public_goods``, create "
"``public_goods/templates/public_goods/Page.html``:"
msgstr ""

#: ../../source/misc/advanced.rst:49
msgid "Then make each template inherit from this template:"
msgstr ""

#: ../../source/misc/advanced.rst:57
msgid ""
"To include the same JS/CSS in *all apps* of a project, modify "
"``_templates/global/Page.html``. In that file, you will find the blocks "
"``global_scripts`` and ``global_styles``."
msgstr ""

#: ../../source/misc/advanced.rst:64
msgid "Static files"
msgstr ""

#: ../../source/misc/advanced.rst:67
msgid ""
"Here is how to include images (or any other static file like .css, .js, "
"etc.) in your pages."
msgstr ""

#: ../../source/misc/advanced.rst:69
#, python-format
msgid ""
"At the root of your oTree project, there is a ``_static/`` folder. Put a "
"file there, for example ``puppy.jpg``. Then, in your template, you can "
"get the URL to that file with ``{% static 'puppy.jpg' %}``."
msgstr ""

#: ../../source/misc/advanced.rst:74
msgid "To display an image, use the ``<img>`` tag, like this:"
msgstr ""

#: ../../source/misc/advanced.rst:80
msgid ""
"Above we saved our image in ``_static/puppy.jpg``, But actually it's "
"better to make a subfolder with the name of your app, and save it as "
"``_static/your_app_name/puppy.jpg``, to keep files organized and prevent "
"name conflicts."
msgstr ""

#: ../../source/misc/advanced.rst:85
msgid "Then your HTML code becomes:"
msgstr ""

#: ../../source/misc/advanced.rst:91
msgid ""
"(If you prefer, you can also put static files inside your app folder, in "
"a subfolder called ``static/your_app_name``.)"
msgstr ""

#: ../../source/misc/advanced.rst:94
msgid ""
"If a static file is not updating even after you changed it, this is "
"because your browser cached the file. Do a full page reload (usually "
"Ctrl+F5)"
msgstr ""

#: ../../source/misc/advanced.rst:98
msgid ""
"If you have videos or high-resolution images, it's preferable to store "
"them somewhere online and reference them by URL because the large file "
"size can make uploading your .otreezip file much slower."
msgstr ""

#: ../../source/misc/advanced.rst:105
msgid "Wait pages"
msgstr ""

#: ../../source/misc/advanced.rst:110
msgid "Custom wait page template"
msgstr ""

#: ../../source/misc/advanced.rst:112
msgid ""
"You can make a custom wait page template. For example, save this to "
"``your_app_name/templates/your_app_name/MyWaitPage.html``:"
msgstr ""

#: ../../source/misc/advanced.rst:127
msgid "Then tell your wait page to use this template:"
msgstr ""

#: ../../source/misc/advanced.rst:134
msgid ""
"Then you can use ``vars_for_template`` in the usual way. Actually, the "
"``body_text`` and ``title_text`` attributes are just shorthand for "
"setting ``vars_for_template``; the following 2 code snippets are "
"equivalent:"
msgstr ""

#: ../../source/misc/advanced.rst:150
msgid ""
"If you want to apply your custom wait page template globally, save it to "
"``_templates/global/WaitPage.html``. oTree will then automatically use it"
" everywhere instead of the built-in wait page."
msgstr ""

#: ../../source/misc/advanced.rst:155
msgid "CSS and JavaScript in Wait Pages"
msgstr ""

#: ../../source/misc/advanced.rst:157
msgid ""
"Wait pages have the same block structure as regular pages "
"(``global_scripts``, ``app_scripts``, ``scripts``, etc...), so you can "
"follow the same instructions described in :ref:`base-template` and "
":ref:`selectors`."
msgstr ""

#: ../../source/misc/advanced.rst:162
msgid ""
"For example, to apply CSS to your custom wait page at "
"``_templates/global/WaitPage.html``, put a block ``global_scripts`` in "
"the template."
msgstr ""

#: ../../source/misc/advanced.rst:165
msgid ""
"You can even make other custom wait pages inherit from "
"``_templates/global/WaitPage.html``, just the way regular pages inherit "
"from ``_templates/global/Page.html``, and they can define the blocks "
"``app_scripts`` and ``scripts``, etc."
msgstr ""

#: ../../source/misc/advanced.rst:172
msgid "Modifying an existing database"
msgstr ""

#: ../../source/misc/advanced.rst:174
msgid ""
"If your database already contains data and you want to update the "
"structure without running ``resetdb`` (which will delete existing data), "
"see `here <https://github.com/oTree-org/otree-"
"docs/blob/f3c6ceca5346b988b194dad5f805a06814ebea68/source/misc/advanced.rst"
"#modifying-an-existing-database>`__"
msgstr ""

#: ../../source/misc/advanced.rst:179
msgid "Currency"
msgstr ""

#: ../../source/misc/advanced.rst:181
msgid ""
"To customize the name \"points\" to something else like \"tokens\" or "
"\"credits\", set ``POINTS_CUSTOM_NAME``, e.g. ``POINTS_CUSTOM_NAME = "
"'tokens'``."
msgstr ""

#: ../../source/misc/advanced.rst:184
msgid ""
"You can change the number of decimal places in real world currency "
"amounts with the setting ``REAL_WORLD_CURRENCY_DECIMAL_PLACES``. If the "
"extra decimal places show up but are always 0, then you should reset the "
"database."
msgstr ""

#: ../../source/misc/advanced.rst:190
msgid "Reading CSV or other files"
msgstr ""

#: ../../source/misc/advanced.rst:192
msgid ""
"Store yourfile.csv in your app, next to models.py. Then put this code "
"anywhere you want to read the file (in a method or in Constants):"
msgstr ""

#: ../../source/misc/advanced.rst:202
msgid ""
"If it's not CSV and you just want to read the file contents as a string, "
"this gets simplified to:"
msgstr ""

#: ../../source/misc/bots_advanced.rst:4
msgid "Bots: advanced features"
msgstr ""

#: ../../source/misc/bots_advanced.rst:11
msgid "Command line bots"
msgstr ""

#: ../../source/misc/bots_advanced.rst:13
msgid ""
"An alternative to running bots in your web browser is to run them in the "
"command line. Command line bots run faster and require less setup."
msgstr ""

#: ../../source/misc/bots_advanced.rst:16
#: ../../source/misc/bots_advanced.rst:51
msgid "Run this::"
msgstr ""

#: ../../source/misc/bots_advanced.rst:20
msgid ""
"To test with a specific number of participants (otherwise it will default"
" to ``num_demo_participants``)::"
msgstr ""

#: ../../source/misc/bots_advanced.rst:25
msgid "To run tests for all session configs::"
msgstr ""

#: ../../source/misc/bots_advanced.rst:30
msgid "Exporting data"
msgstr ""

#: ../../source/misc/bots_advanced.rst:32
msgid "Use the ``--export`` flag to export the results to a CSV file::"
msgstr ""

#: ../../source/misc/bots_advanced.rst:36
msgid "To specify the folder where the data is saved, do::"
msgstr ""

#: ../../source/misc/bots_advanced.rst:42
msgid "Command-line browser bots"
msgstr ""

#: ../../source/misc/bots_advanced.rst:44
msgid ""
"You can launch browser bots from the command line, using ``otree "
"browser_bots``."
msgstr ""

#: ../../source/misc/bots_advanced.rst:46
msgid ""
"Make sure Google Chrome is installed, or set ``BROWSER_COMMAND`` in "
"``settings.py`` (more info below)."
msgstr ""

#: ../../source/misc/bots_advanced.rst:48
msgid "Set ``OTREE_REST_KEY`` env var as described in :ref:`rest`."
msgstr ""

#: ../../source/misc/bots_advanced.rst:49
msgid "Run your server"
msgstr ""

#: ../../source/misc/bots_advanced.rst:50
msgid "Close all Chrome windows."
msgstr ""

#: ../../source/misc/bots_advanced.rst:55
msgid ""
"This will launch several Chrome tabs and run the bots. When finished, the"
" tabs will close, and you will see a report in your terminal window."
msgstr ""

#: ../../source/misc/bots_advanced.rst:59
msgid ""
"If Chrome doesn't close windows properly, make sure you closed all Chrome"
" windows prior to launching the command."
msgstr ""

#: ../../source/misc/bots_advanced.rst:63
msgid "Command-line browser bots on a remote server (e.g. Heroku)"
msgstr ""

#: ../../source/misc/bots_advanced.rst:65
msgid ""
"If the server is running on a host/port other than the usual "
"``http://localhost:8000``, you need to pass ``--server-url``. For "
"example, if it's on Heroku, you would do like this::"
msgstr ""

#: ../../source/misc/bots_advanced.rst:73
msgid "Choosing session configs and sizes"
msgstr ""

#: ../../source/misc/bots_advanced.rst:75
msgid "You can specify the number of participants::"
msgstr ""

#: ../../source/misc/bots_advanced.rst:79
msgid "To test all session configs, just run this::"
msgstr ""

#: ../../source/misc/bots_advanced.rst:85
msgid "Browser bots: misc notes"
msgstr ""

#: ../../source/misc/bots_advanced.rst:87
msgid ""
"You can use a browser other than Chrome by setting ``BROWSER_COMMAND`` in"
" ``settings.py``. Then, oTree will open the browser by doing something "
"like ``subprocess.Popen(settings.BROWSER_COMMAND)``."
msgstr ""

#: ../../source/misc/bots_advanced.rst:94
msgid "Test cases"
msgstr ""

#: ../../source/misc/bots_advanced.rst:96
msgid ""
"You can define an attribute ``cases`` on your PlayerBot class that lists "
"different test cases. For example, in a public goods game, you may want "
"to test 3 scenarios:"
msgstr ""

#: ../../source/misc/bots_advanced.rst:100
msgid "All players contribute half their endowment"
msgstr ""

#: ../../source/misc/bots_advanced.rst:101
msgid "All players contribute nothing"
msgstr ""

#: ../../source/misc/bots_advanced.rst:102
msgid "All players contribute their entire endowment (100 points)"
msgstr ""

#: ../../source/misc/bots_advanced.rst:104
msgid ""
"We can call these 3 test cases \"basic\", \"min\", and \"max\", "
"respectively, and put them in ``cases``. Then, oTree will execute the bot"
" 3 times, once for each test case. Each time, a different value from "
"``cases`` will be assigned to ``self.case`` in the bot."
msgstr ""

#: ../../source/misc/bots_advanced.rst:109
msgid "For example:"
msgstr ""

#: ../../source/misc/bots_advanced.rst:152
msgid ""
"If you use cases, it's better to use :ref:`cli-bots` since browser bots "
"will only execute a single case."
msgstr ""

#: ../../source/misc/bots_advanced.rst:154
msgid ""
"``cases`` needs to be a list, but it can contain any data type, such as "
"strings, integers, or even dictionaries. Here is a trust game bot that "
"uses dictionaries as cases."
msgstr ""

#: ../../source/misc/bots_advanced.rst:196
msgid "error_fields"
msgstr ""

#: ../../source/misc/bots_advanced.rst:198
msgid ""
"When using ``SubmissionMustFail`` on forms with multiple fields, you can "
"use ``error_fields`` for extra thoroughness."
msgstr ""

#: ../../source/misc/bots_advanced.rst:201
msgid ""
"For example, let's say we a submit a valid ``age``, but an invalid "
"``weight`` and ``height``:"
msgstr ""

#: ../../source/misc/bots_advanced.rst:215
msgid ""
"What's missing is that the bot system doesn't tell us exactly *why* the "
"submission fails. Is it an invalid ``weight``, ``height``, or both? "
"``error_fields`` can resolve the ambiguity:"
msgstr ""

#: ../../source/misc/bots_advanced.rst:231
msgid ""
"This will verify that ``weight`` and ``height`` contained errors, but "
"``age`` did not."
msgstr ""

#: ../../source/misc/bots_advanced.rst:234
msgid ""
"If :ref:`error_message <error_message>` returns an error, then "
"``error_fields`` will be ``['__all__']``."
msgstr ""

#: ../../source/misc/bots_advanced.rst:238
msgid "Misc note"
msgstr ""

#: ../../source/misc/bots_advanced.rst:240
msgid ""
"In bots, it is risky to assign ``player = self.player`` (or ``participant"
" = self.participant``, etc), even though that kind of code is encouraged "
"elsewhere."
msgstr ""

#: ../../source/misc/bots_advanced.rst:244
msgid "Because if there is a ``yield`` in between, the data can be stale:"
msgstr ""

#: ../../source/misc/bots_advanced.rst:257
msgid ""
"It's safer to use ``self.player.money_left`` directly, because doing "
"``self.player`` gets the most recent data from the database."
msgstr ""

#: ../../source/misc/intro.rst:2
msgid "Miscellaneous"
msgstr ""

#: ../../source/misc/rest_api.rst:4
msgid "REST"
msgstr ""

#: ../../source/misc/rest_api.rst:8
msgid "These features are new in oTree 3.0 (July 2020)."
msgstr ""

#: ../../source/misc/rest_api.rst:10
msgid ""
"oTree has a small REST API that enables external programs (such as other "
"websites) to communicate with oTree, in particular:"
msgstr ""

#: ../../source/misc/rest_api.rst:13
msgid "Create sessions"
msgstr ""

#: ../../source/misc/rest_api.rst:14
msgid "Add participant vars"
msgstr ""

#: ../../source/misc/rest_api.rst:15
msgid "Add session vars"
msgstr ""

#: ../../source/misc/rest_api.rst:17
msgid ""
"A REST API is just a URL on your server that is designed to be accessed "
"by programs, rather than being opened manually in a web browser."
msgstr ""

#: ../../source/misc/rest_api.rst:20
msgid "Simply make a request to one of the below URLs."
msgstr ""

#: ../../source/misc/rest_api.rst:23
msgid "\"Create sessions\" REST endpoint"
msgstr ""

#: ../../source/misc/rest_api.rst:25
msgid "POST URL: ``/api/sessions/``"
msgstr ""

#: ../../source/misc/rest_api.rst:27
msgid ""
"Here are some examples of how the \"create sessions\" endpoint can be "
"used:"
msgstr ""

#: ../../source/misc/rest_api.rst:29
msgid "Other websites can create oTree sessions automatically"
msgstr ""

#: ../../source/misc/rest_api.rst:30
msgid ""
"You can make a fancier alternative to oTree's :ref:`edit_config` "
"interface (e.g. with sliders and visual widgets)"
msgstr ""

#: ../../source/misc/rest_api.rst:32
msgid "Process that will create new oTree sessions on some fixed schedule"
msgstr ""

#: ../../source/misc/rest_api.rst:33
msgid ""
"Command line script to create customized sessions (if ``otree "
"create_session`` is not sufficient)"
msgstr ""

#: ../../source/misc/rest_api.rst:37 ../../source/misc/rest_api.rst:91
#: ../../source/misc/rest_api.rst:134
msgid "Example"
msgstr ""

#: ../../source/misc/rest_api.rst:54
msgid "*\"Where should I put this code?\"*"
msgstr ""

#: ../../source/misc/rest_api.rst:56
msgid ""
"This code does not need to go inside your oTree project folder. Since the"
" point of the REST API is to allow external programs and servers to "
"communicate with oTree across the internet, you should put this code in "
"that other program. That also means you should use whatever language that"
" other server uses. The examples on this page use Python, but it's simple"
" to make HTTP requests using any programming language, or tools like "
"webhooks or cURL."
msgstr ""

#: ../../source/misc/rest_api.rst:66 ../../source/misc/rest_api.rst:105
#: ../../source/misc/rest_api.rst:147
msgid "Parameters"
msgstr ""

#: ../../source/misc/rest_api.rst:68
msgid "``session_config_name`` (required)"
msgstr ""

#: ../../source/misc/rest_api.rst:69
msgid "``num_participants`` (required)"
msgstr ""

#: ../../source/misc/rest_api.rst:70
msgid ""
"``modified_session_config_fields``: an optional dict of session config "
"parameters, as discussed in :ref:`edit_config`."
msgstr ""

#: ../../source/misc/rest_api.rst:72
msgid "``room_name`` if you want to create the session in a room."
msgstr ""

#: ../../source/misc/rest_api.rst:78
msgid "\"Participant vars\" REST endpoint"
msgstr ""

#: ../../source/misc/rest_api.rst:80
msgid "POST URL: ``/api/participant_vars/``"
msgstr ""

#: ../../source/misc/rest_api.rst:82
msgid ""
"This endpoint lets you set ``participant.vars``. The main purpose is to "
"allow other sites/apps to pass information about a participant to oTree, "
"via web services / webhooks. For example, if the user does a survey on "
"Qualtrics that then links to oTree, you can pass their survey data (like "
"gender, age, etc) into oTree as participant vars. (Qualtrics allows "
"making POST requests through their `web service "
"<https://www.qualtrics.com/support/survey-platform/survey-module/survey-"
"flow/advanced-elements/web-service/>`__ feature.)"
msgstr ""

#: ../../source/misc/rest_api.rst:107 ../../source/misc/rest_api.rst:149
msgid "``room_name`` (required)"
msgstr ""

#: ../../source/misc/rest_api.rst:108
msgid "``participant_label`` (required)"
msgstr ""

#: ../../source/misc/rest_api.rst:109
msgid ""
"``vars`` (required): a dict of participant vars to add. Values can be any"
" JSON-serializable data type, even nested dicts/lists."
msgstr ""

#: ../../source/misc/rest_api.rst:112
msgid ""
"This feature requires you to use a Room. Participants are uniquely "
"identified with the combination of room name & participant label. So you "
"will need to give participants a link with a ``participant_label``, "
"although this does not need to come from a ``participant_label_file``."
msgstr ""

#: ../../source/misc/rest_api.rst:120
msgid "\"Session vars\" REST endpoint"
msgstr ""

#: ../../source/misc/rest_api.rst:124
msgid "New in oTree 3.0.6"
msgstr ""

#: ../../source/misc/rest_api.rst:126
msgid "POST URL: ``/api/session_vars/``"
msgstr ""

#: ../../source/misc/rest_api.rst:128
msgid ""
"This endpoint lets you set ``session.vars``. One use is experimenter "
"input. For example, if the experimenter does a lottery drawing in the "
"middle of the experiment, they can input the result by running a script "
"like the one below."
msgstr ""

#: ../../source/misc/rest_api.rst:150
msgid "``vars`` (required): a dict of session vars to add."
msgstr ""

#: ../../source/misc/rest_api.rst:152
msgid "This feature requires you to use a Room."
msgstr ""

#: ../../source/misc/rest_api.rst:155
msgid "Note"
msgstr ""

#: ../../source/misc/rest_api.rst:157
msgid ""
"If you are using this for experimenter input during an experiment, you "
"may also want to use :ref:`error_message <error_message>`:"
msgstr ""

#: ../../source/misc/rest_api.rst:168
msgid "Authentication"
msgstr ""

#: ../../source/misc/rest_api.rst:170
msgid ""
"If you have set your auth level to DEMO or STUDY, you must authenticate "
"your REST API requests."
msgstr ""

#: ../../source/misc/rest_api.rst:173
msgid ""
"Create an env var (i.e. Heroku config var) ``OTREE_REST_KEY`` on the "
"server. Set it to some secret value."
msgstr ""

#: ../../source/misc/rest_api.rst:176
msgid ""
"When you make a request, add that key as an HTTP header called ``otree-"
"rest-key``. For example:"
msgstr ""

#: ../../source/misc/rest_api.rst:196
msgid "Demo & testing"
msgstr ""

#: ../../source/misc/rest_api.rst:198
msgid ""
"For convenience during development, you can generate fake vars to "
"simulate data that, in a real session, will come from the REST API."
msgstr ""

#: ../../source/misc/rest_api.rst:201
msgid ""
"In your session config, add the parameter ``mock_exogenous_data=True`` "
"(We call it **exogenous** data because it originates outside oTree.)"
msgstr ""

#: ../../source/misc/rest_api.rst:204
msgid ""
"Then define a function with the same name (``mock_exogenous_data``) in "
"your project's shared_out.py (if you are using a text editor, you may "
"need to create that file)."
msgstr ""

#: ../../source/misc/rest_api.rst:208
msgid "Here's an example:"
msgstr ""

#: ../../source/misc/rest_api.rst:217
msgid "You can also set participant labels here."
msgstr ""

#: ../../source/misc/rest_api.rst:219
msgid ""
"When you run a session in demo mode, or using bots, "
"``mock_exogenous_data()`` will automatically be run after "
"``creating_session``. However, it will not be run if the session is "
"created in a room."
msgstr ""

#: ../../source/misc/rest_api.rst:223
msgid ""
"If you have multiple session configs that require different exogenous "
"data, you can branch like this:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:2
msgid "Tips and tricks"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:5
msgid "Preventing code duplication"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:7
msgid ""
"As much as possible, it's good to avoid copy-pasting the same code in "
"multiple places. Although it sometimes takes a bit of thinking to figure "
"out how to avoid copy-pasting code, you will see that having your code in"
" only one place usually saves you a lot of effort later when you need to "
"change the design of your code or fix bugs."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:14
msgid "Below are some techniques to achieve code reuse."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:17
msgid "Don't make multiple copies of your app"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:19
msgid ""
"If possible, you should avoid copying an app's folder to make a slightly "
"different version, because then you have duplicated code that is harder "
"to maintain."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:22
msgid ""
"If you need multiple rounds, set ``num_rounds``. If you need slightly "
"different versions (e.g. different treatments), then you should use the "
"techniques described in :ref:`treatments`, such as making 2 session "
"configs that have a different ``'treatment'`` parameter, and then "
"checking for ``self.session.config['treatment']`` in your app's code."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:33
msgid "How to make many fields"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:35
msgid "Let's say your app has many fields that are almost the same, such as:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:84
msgid "This is quite complex; you should look for a way to simplify."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:86
msgid ""
"Are the fields all displayed on separate pages? If so, consider "
"converting this to a 10-round game with just one field. See the `real "
"effort <https://github.com/oTree-org/oTree/tree/master/real_effort>`__ "
"sample game for an example of how to just have 1 page that gets looped "
"over many rounds, varying the question that gets displayed with each "
"round."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:92
msgid ""
"If that's not possible, then you can reduce the amount of repeated code "
"by defining a method that returns a field:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:114
msgid "Templates: prevent code duplication by using a base template"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:116
msgid ""
"If you are copy-pasting the same JavaScript or CSS to multiple templates,"
" you should instead put it in one of the following blocks in a base "
"template:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:119
msgid "``{% block global_styles %}``"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:120
msgid "``{% block global_scripts %}``"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:121
msgid "``{% block app_styles %}``"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:122
msgid "``{% block app_scripts %}``"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:124
msgid "Read more in :ref:`base-template`."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:127
msgid "Prevent duplicate pages by using multiple rounds"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:129
msgid ""
"If you have many many pages that are almost the same, consider just "
"having 1 page and looping it for multiple rounds. One sign that your code"
" can be simplified is if it looks something like this:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:148
msgid ""
"See the `quiz <https://github.com/oTree-org/oTree/tree/master/quiz>`__ or"
" `real effort <https://github.com/oTree-"
"org/oTree/tree/master/real_effort>`__ sample games for examples of how to"
" just have 1 page that gets looped over many rounds, varying the question"
" that gets displayed with each round."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:156
msgid "pages.py: prevent code duplication by moving code to your models"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:158
msgid ""
"You should try to move as much code as possible into your "
"Player/Group/Subsession."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:163
msgid "Example 1: is_displayed"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:165
msgid ""
"For example, let's say that your pages all repeat some of the code. For "
"example, you use ``is_displayed`` to skip the rest of the app once a "
"certain participant var is set:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:192
msgid ""
"You can eliminate this repetition by moving the ``is_displayed`` code "
"into the Player model:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:202
#: ../../source/misc/tips_and_tricks.rst:256
msgid "Then in your pages:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:228
msgid "Example 2: vars_for_template"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:230
msgid ""
"Let's say you've got the following code (note that ``Page3`` passes extra"
" variables ``d`` and ``e``):"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:248
msgid "You can simplify this by making a method on your Player model:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:274
msgid "Improving code performance"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:276
msgid ""
"You should avoid redundant use of ``get_players()``, "
"``get_player_by_id()``, ``in_*_rounds()``, ``get_others_in_group()``, or "
"any other methods that return a player or list of players. These methods "
"all require a database query, which can be slow."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:281
msgid ""
"For example, this code has a redundant query because it asks the database"
" 5 times for the exact same player:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:297
msgid "It should be simplified to this:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:313
msgid "As an added benefit, this usually makes the code more readable."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:316
msgid "Use BooleanField instead of StringField, where possible"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:318
msgid ""
"Many ``StringFields`` should be broken down into ``BooleanFields``, "
"especially if they only have 2 distinct values."
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:321
msgid "Suppose you have a field called ``treatment``:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:327
msgid "And let's say ``treatment`` it can only have 4 different values:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:329
msgid "``high_income_high_tax``"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:330
msgid "``high_income_low_tax``"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:331
msgid "``low_income_high_tax``"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:332
msgid "``low_income_low_tax``"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:334
msgid "In your pages, you might use it like this:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:347
msgid "It would be much better to break this to 2 separate BooleanFields::"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:352
msgid "Then your pages could be simplified to:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:369
msgid "Avoid duplicated validation methods"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:371
msgid ""
"If you have many repetitive :ref:`FIELD_error_message "
"<FOO_error_message>` methods, you can replace them with a single "
":ref:`error_message <error_message>` method. For example:"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:393
msgid "You can instead define this method on your page (not Player class):"
msgstr ""

#: ../../source/misc/tips_and_tricks.rst:413
msgid ""
"(Usually ``error_message`` is used to return a single error message as a "
"string, but you can also return a dict.)"
msgstr ""

