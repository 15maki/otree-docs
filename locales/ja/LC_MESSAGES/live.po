# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, oTree team
# This file is distributed under the same license as the oTree package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: oTree \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-06 17:13-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/live.rst:4
msgid "Live pages"
msgstr ""

#: ../../source/live.rst:6
msgid ""
"Live pages communicate with the server continuously and update in real "
"time, enabling continuous time games. Live pages are a great fit for "
"games with lots of back-and-forth interaction between users."
msgstr ""

#: ../../source/live.rst:11
msgid ""
"There are a bunch of examples `here <https://www.otreehub.com/projects"
"/otree-more-demos/>`__."
msgstr ""

#: ../../source/live.rst:14
msgid "Sending data to the server"
msgstr ""

#: ../../source/live.rst:16
msgid ""
"In your template's JavaScript code, call the function ``liveSend()`` "
"whenever you want to send data to the server. For example, to submit a "
"bid of 99 on behalf of the user, call:"
msgstr ""

#: ../../source/live.rst:25
msgid ""
"Define a function that will receive this message. Its argument is "
"whatever data was sent."
msgstr ""

#: ../../source/live.rst:38
msgid ""
"If you are using oTree Studio, you must define a player function whose "
"name starts with ``live_``. (Note, ``live_method`` on ``WaitPage`` is not"
" yet supported.)"
msgstr ""

#: ../../source/live.rst:43
msgid "Sending data to the page"
msgstr ""

#: ../../source/live.rst:45
msgid ""
"To send data back, return a dict whose keys are the IDs of the players to"
" receive a message. For example, here is a method that simply sends "
"\"thanks\" to whoever sends a message."
msgstr ""

#: ../../source/live.rst:55
msgid ""
"To send to multiple players, use their ``id_in_group``. For example, this"
" forwards every message to players 2 and 3:"
msgstr ""

#: ../../source/live.rst:63
msgid ""
"To broadcast it to the whole group, use ``0`` (special case since it is "
"not an actual ``id_in_group``)."
msgstr ""

#: ../../source/live.rst:71
msgid ""
"In your JavaScript, define a function ``liveRecv``. This will be "
"automatically called each time a message is received from the server."
msgstr ""

#: ../../source/live.rst:82
msgid "Example: auction"
msgstr ""

#: ../../source/live.rst:131
msgid "(Note, in JavaScript ``data.id_in_group == data['id_in_group']``.)"
msgstr ""

#: ../../source/live.rst:134
msgid "Data"
msgstr ""

#: ../../source/live.rst:136
msgid ""
"The data you send and receive can be any data type (as long as it is JSON"
" serializable). For example these are all valid:"
msgstr ""

#: ../../source/live.rst:146
msgid ""
"The most versatile type of data is a dict, since it allows you to include"
" multiple pieces of metadata, in particular what type of message it is:"
msgstr ""

#: ../../source/live.rst:155
msgid "Then you can use ``if`` statements to process different types of messages:"
msgstr ""

#: ../../source/live.rst:175
msgid "History"
msgstr ""

#: ../../source/live.rst:177
msgid ""
"By default, participants will not see messages that were sent before they"
" arrived at the page. (And data will not be re-sent if they refresh the "
"page.) If you want to save history, you should store it in the database. "
"When a player loads the page, your JavaScript can call something like "
"``liveSend({})``, and you can configure your live_method to retrieve the "
"history of the game from the database."
msgstr ""

#: ../../source/live.rst:184
msgid "ExtraModel"
msgstr ""

#: ../../source/live.rst:186
msgid ""
"Live pages are often used together with an :ref:`ExtraModel "
"<ExtraModel>`, which allows you to store each individual message or "
"action in the database."
msgstr ""

#: ../../source/live.rst:190
msgid "Keeping users on the page"
msgstr ""

#: ../../source/live.rst:192
msgid ""
"Let's say you require 10 messages to be sent before the users can proceed"
" to the next page."
msgstr ""

#: ../../source/live.rst:195
msgid ""
"First, you should omit the ``{{ next_button }}``. (Or use JS to hide it "
"until the task is complete.)"
msgstr ""

#: ../../source/live.rst:198
msgid "When the task is completed, you send a message:"
msgstr ""

#: ../../source/live.rst:216
msgid "Then in the template, automatically submit the page via JavaScript:"
msgstr ""

#: ../../source/live.rst:229
msgid ""
"By the way, using a similar technique, you could implement a custom wait "
"page, e.g. one that lets you proceed after a certain timeout, even if not"
" all players have arrived."
msgstr ""

#: ../../source/live.rst:234
msgid "General advice about live pages"
msgstr ""

#: ../../source/live.rst:236
msgid ""
"Here is some general advice (does not apply to all situations). We "
"recommend implementing most of your logic in Python, and just using "
"JavaScript to update the page's HTML, because:"
msgstr ""

#: ../../source/live.rst:240
msgid "The JavaScript language can be quite tricky to use properly"
msgstr ""

#: ../../source/live.rst:241
msgid ""
"Your Python code runs on the server, which is centralized and reliable. "
"JavaScript runs on the clients, which can get out of sync with each "
"other, and data can get lost when the page is closed or reloaded."
msgstr ""

#: ../../source/live.rst:244
msgid ""
"Because Python code runs on the server, it is more secure and cannot be "
"viewed or modified by participants."
msgstr ""

#: ../../source/live.rst:248
msgid "Example: tic-tac-toe"
msgstr ""

#: ../../source/live.rst:250
msgid ""
"Let's say you are implementing a game of tic-tac-toe. There are 2 types "
"of messages your live_method can receive:"
msgstr ""

#: ../../source/live.rst:253
msgid "A user marks a square, so you need to notify the other player"
msgstr ""

#: ../../source/live.rst:254
msgid ""
"A user loads (or reloads) the page, so you need to send them the current "
"board layout."
msgstr ""

#: ../../source/live.rst:256
msgid ""
"For situation 1, you should use a JavaScript event handler like "
"``onclick``, e.g. so when the user clicks on square 3, that move gets "
"sent to the server:"
msgstr ""

#: ../../source/live.rst:263
msgid ""
"For situation 2, it's good to put some code like this in your template, "
"which sends an empty message to the server when the page loads:"
msgstr ""

#: ../../source/live.rst:272
msgid "The server handles these 2 situations with an \"if\" statement:"
msgstr ""

#: ../../source/live.rst:299
msgid ""
"In situation 2 (the player loads the page), the client gets a message "
"like:"
msgstr ""

#: ../../source/live.rst:305
msgid ""
"In situation 1, the player gets the update about the move that was just "
"made, AND the current state."
msgstr ""

#: ../../source/live.rst:311
msgid ""
"The JavaScript code can be \"dumb\". It doesn't need to keep track of "
"whose move it is; it just trusts the info it receives from the server. It"
" can even redraw the board each time it receives a message."
msgstr ""

#: ../../source/live.rst:315
msgid ""
"Your code will also need to validate user input. For example, if player 1"
" tries to move when it is actually player 2's turn, you need to block "
"that. For reasons listed in the previous section, it's better to do this "
"in your live_method than in JavaScript code."
msgstr ""

#: ../../source/live.rst:320
msgid "Summary"
msgstr ""

#: ../../source/live.rst:322
msgid "As illustrated above, the typical pattern for a live_method is like this::"
msgstr ""

#: ../../source/live.rst:336
msgid ""
"Note that we get the game's state twice. That's because the state changes"
" when we update our models, so we need to refresh it."
msgstr ""

#: ../../source/live.rst:340
msgid "Troubleshooting"
msgstr ""

#: ../../source/live.rst:341
msgid ""
"If you call ``liveSend`` before the page has finished loading, you will "
"get an error like ``liveSend is not defined``. So, wait for "
"``DOMContentLoaded`` (or jQuery document.ready, etc):"
msgstr ""

#: ../../source/live.rst:351
msgid ""
"Don't trigger ``liveSend`` when the user clicks the \"next\" button, "
"since leaving the page might interrupt the ``liveSend``. Instead, have "
"the user click a regular button that triggers a ``liveSend``, and then "
"doing ``document.getElementById(\"form\").submit();`` in your "
"``liveRecv``."
msgstr ""

#~ msgid ""
#~ "Live pages communicate with the server"
#~ " continuously and update in real "
#~ "time, enabling continuous time games. "
#~ "Live pages are a great fit for "
#~ "games with lots of back-and-forth"
#~ " interaction between users, and for "
#~ "single-player games with quick iteration."
#~ msgstr ""

#~ msgid "(Note, ``live_method`` on ``WaitPage`` is not yet supported.)"
#~ msgstr ""

#~ msgid ""
#~ "By default, participants will not see"
#~ " messages that were sent before they"
#~ " arrived at the page. (And data "
#~ "will not be re-sent if they "
#~ "refresh the page.) If you want to"
#~ " save history, you should store it"
#~ " in the database. When a player "
#~ "loads the page, your JavaScript can "
#~ "call something like ``liveSend({'type': "
#~ "'connect'})``, and you can configure "
#~ "your live_method to retrieve the history"
#~ " of the game from the database."
#~ msgstr ""

#~ msgid ""
#~ "First, you should omit the ``{% "
#~ "next_button %}``. (Or use JS to "
#~ "hide it until the task is "
#~ "complete.)"
#~ msgstr ""

#~ msgid "For security, you should use :ref:`error_message <error_message>`:"
#~ msgstr ""

#~ msgid "Form validation"
#~ msgstr ""

#~ msgid ""
#~ "If you have a form with multiple"
#~ " fields, it may be simpler to "
#~ "use a regular page with ``form_model``"
#~ " and ``form_fields``. because then you "
#~ "have the convenience of ``{% formfields"
#~ " %}`` and ``error_message``, etc."
#~ msgstr ""

#~ msgid ""
#~ "Let's say your live page asks "
#~ "players to submit bids, and the "
#~ "maximum bid is 99. In a non-"
#~ "live page you would check this "
#~ "using :ref:`form-validation`. But with "
#~ "live pages, you must verify it "
#~ "inside the ``live_method``:"
#~ msgstr ""

#~ msgid ""
#~ "In addition, you can add attributes "
#~ "to the ``<input>`` element like "
#~ "``max=\"99\"``. (But note HTML code is"
#~ " not secure and can be modified "
#~ "by tech-savvy participants.) If you "
#~ "do this, you should also add "
#~ "``form=\"liveform\"``. This will exclude that"
#~ " ``<input>`` from the page's main "
#~ "form, so that when the user clicks"
#~ " the ``{% next_button %}``, the "
#~ "validation will not be triggered ."
#~ msgstr ""

#~ msgid "So, it looks like this:"
#~ msgstr ""

#~ msgid ""
#~ "To trigger validation when the user "
#~ "submits the bid, use this (e.g. in"
#~ " your ``onclick`` handler):"
#~ msgstr ""

#~ msgid ""
#~ "``reportValidity()`` is a built-in "
#~ "JavaScript function that will show the"
#~ " user any errors in their form "
#~ "fields. It also returns a boolean "
#~ "that tells if the form is "
#~ "currently valid. You can use that "
#~ "to skip the ``liveSend``."
#~ msgstr ""

