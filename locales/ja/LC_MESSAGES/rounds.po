# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, oTree team
# This file is distributed under the same license as the oTree package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: oTree \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-19 21:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/rounds.rst:2
msgid "Apps & rounds"
msgstr ""

#: ../../source/rounds.rst:5
msgid "Apps"
msgstr ""

#: ../../source/rounds.rst:7
msgid ""
"An oTree app is a folder containing Python and HTML code. A project "
"contains multiple apps. A session is basically a sequence of apps that "
"are played one after the other."
msgstr ""

#: ../../source/rounds.rst:12
msgid "Combining apps"
msgstr ""

#: ../../source/rounds.rst:14
msgid "You can combine apps by setting your session config's ``app_sequence``."
msgstr ""

#: ../../source/rounds.rst:17
msgid "Passing data between apps"
msgstr ""

#: ../../source/rounds.rst:19
msgid "See :ref:`participant.vars <vars>` and :ref:`session.vars <session_vars>`."
msgstr ""

#: ../../source/rounds.rst:25
msgid "Rounds"
msgstr ""

#: ../../source/rounds.rst:27
msgid ""
"You can make a game run for multiple rounds by setting "
"``Constants.num_rounds``. For example, if your session config's "
"``app_sequence`` is ``['app1', 'app2']``, where ``app1`` has ``num_rounds"
" = 3`` and ``app2`` has ``num_rounds = 1``, then your sessions will "
"contain 4 subsessions."
msgstr ""

#: ../../source/rounds.rst:34
msgid "Round numbers"
msgstr ""

#: ../../source/rounds.rst:36
msgid ""
"You can get the current round number with ``player.round_number`` (this "
"attribute is present on subsession, group, and player objects). Round "
"numbers start from 1."
msgstr ""

#: ../../source/rounds.rst:43
msgid "Passing data between rounds or apps"
msgstr ""

#: ../../source/rounds.rst:45
msgid ""
"Each round has separate subsession, ``Group``, and ``Player`` objects. "
"For example, let's say you set ``player.my_field = True`` in round 1. In "
"round 2, if you try to access ``player.my_field``, you will find its "
"value is ``None``. This is because the ``Player`` objects in round 1 are "
"separate from ``Player`` objects in round 2."
msgstr ""

#: ../../source/rounds.rst:52
msgid ""
"To access data from a previous round or app, you can use one of the "
"techniques described below."
msgstr ""

#: ../../source/rounds.rst:56
msgid "in_rounds, in_previous_rounds, in_round, etc."
msgstr ""

#: ../../source/rounds.rst:58
msgid "Player, group, and subsession objects have the following methods:"
msgstr ""

#: ../../source/rounds.rst:60
msgid "in_previous_rounds()"
msgstr ""

#: ../../source/rounds.rst:61
msgid "in_all_rounds()"
msgstr ""

#: ../../source/rounds.rst:62
msgid "in_rounds()"
msgstr ""

#: ../../source/rounds.rst:63
msgid "in_round()"
msgstr ""

#: ../../source/rounds.rst:65
msgid ""
"For example, if you are in the last round of a 10-round game, "
"``player.in_previous_rounds()`` will return a list with 9 player objects,"
" which represent the current participant in all previous rounds."
msgstr ""

#: ../../source/rounds.rst:69
msgid ""
"``player.in_all_rounds()`` is almost the same but the list will have 10 "
"objects, because it includes the current round's player."
msgstr ""

#: ../../source/rounds.rst:72
msgid ""
"``player.in_rounds(m, n)`` returns a list of players representing the "
"same participant from rounds ``m`` to ``n``."
msgstr ""

#: ../../source/rounds.rst:74
msgid ""
"``player.in_round(m)`` returns just the player in round ``m``. For "
"example, to get the player's payoff in the previous round, you would do:"
msgstr ""

#: ../../source/rounds.rst:83
msgid ""
"These methods work the same way for subsessions (e.g. "
"``subsession.in_all_rounds()``)."
msgstr ""

#: ../../source/rounds.rst:85
msgid ""
"They also work the same way for groups, but it does not make sense to use"
" them if you re-shuffle groups between rounds."
msgstr ""

#: ../../source/rounds.rst:90
msgid "participant.vars"
msgstr ""

#: ../../source/rounds.rst:92
msgid ""
"If you want to access a participant's data from a previous app, you "
"should store this data on the participant object, which persists across "
"apps (see :ref:`participants_and_players`). (``in_all_rounds()`` only is "
"useful when you need to access data from a previous round of the same "
"app.) Put it in ``participant.vars``, which is a dict that can store any "
"data. For example, you can set an attribute like this::"
msgstr ""

#: ../../source/rounds.rst:102
msgid ""
"Later in the session (e.g. in a separate app), you can retrieve it like "
"this::"
msgstr ""

#: ../../source/rounds.rst:110
msgid ""
"You can test if ``'my_var'`` exists with ``if 'my_var' in "
"participant.vars:``."
msgstr ""

#: ../../source/rounds.rst:112
msgid ""
"``participant.vars`` is not included in the Excel/CSV data export, or in "
"the \"Data\" tab in the session admin. If you want that, you should "
"either use :ref:`custom-export` or save ``str(participant.vars)`` into a "
"``LongStringField``. (The same concept applies for ``session.vars``.)"
msgstr ""

#: ../../source/rounds.rst:120
msgid "session.vars"
msgstr ""

#: ../../source/rounds.rst:122
msgid ""
"For global variables that are the same for all participants in the "
"session, you can use ``session.vars``. This is a dict just like "
"``participant.vars``."
msgstr ""

#: ../../source/rounds.rst:128
msgid "Variable number of rounds"
msgstr ""

#: ../../source/rounds.rst:130
msgid "If you want a variable number of rounds, consider using :ref:`live`."
msgstr ""

#: ../../source/rounds.rst:132
msgid ""
"Alternatively, you can set ``num_rounds`` to some high number, and then "
"in your app, conditionally hide the ``{% next_button %}`` element, so "
"that the user cannot proceed to the next page, or use "
":ref:`app_after_this_page`. But note that having many rounds (e.g. more "
"than 100) might cause performance problems, so test your app carefully."
msgstr ""

